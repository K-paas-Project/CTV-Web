name: Deploy
on:
  push:
    branches: [main] # main 브랜치에 push 발생하면 트리거
  workflow_dispatch: # 디버깅용, actions 탭에서 직접 버튼 눌러서 트리거

jobs:
  deploy:
    runs-on: ubuntu-latest # ubuntu 최신 버전 환경에서 실행

    steps:
      # GitHub Actions는 해당 프로젝트를 만들어진 환경에 checkout하고 나서 실행한다.
      - name: Checkout
        uses: actions/checkout@v3.5.2

	  # React 프로젝트이므로 해당 환경을 Node.js 위에서 실행하겠다고 명시한다.
      # 마찬가지로 누군가 만들어 놓은 Action이다.
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.2
        with:
          node-version: lts/Hydrogen

      - name: Cache node modules
        uses: actions/cache@v2.1.8
        id: cache
        with:
          path: node_modules
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build
        run: npm run build

	  # Docker에 연결하여 이미지를 빌드하고 Hub에 푸시한다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ctvweb

	  # 마지막으로 ssh로 인스턴스에 연결하여 이미지를 Pull하고 컨테이너를 재시작한다.
      - name: Pull and restart Docker Container
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ctvweb
            docker stop ctvweb
            docker run -d --rm --name ctvweb -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/ctvweb
